"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/page",{

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./src/lib/api.ts\");\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuth = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const isAuthenticated = !!user && !!token;\n    // Initialize auth state on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initAuth = async ()=>{\n            try {\n                // Development mode: Auto-login with mock user\n                if (true) {\n                    const mockUser = {\n                        id: \"dev-user-123\",\n                        email: \"dev@serai.com\",\n                        firstName: \"Development\",\n                        lastName: \"User\",\n                        phone: \"+1 (555) 123-4567\",\n                        role: \"GUEST\",\n                        isVerified: true,\n                        isActive: true,\n                        preferences: {\n                            language: \"en\",\n                            currency: \"CAD\",\n                            timezone: \"America/Toronto\",\n                            emailNotifications: true,\n                            smsNotifications: false,\n                            pushNotifications: true\n                        }\n                    };\n                    const mockToken = \"dev-token-123\";\n                    setUser(mockUser);\n                    setToken(mockToken);\n                    _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                    localStorage.setItem(\"token\", mockToken);\n                    console.log(\"\\uD83D\\uDE80 Development mode: Auto-logged in as mock user\");\n                    setIsLoading(false);\n                    return;\n                }\n                // Production mode: Check stored token\n                const storedToken = localStorage.getItem(\"token\");\n                if (storedToken) {\n                    _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(storedToken);\n                    const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.getMe();\n                    if (response.success && response.data) {\n                        setUser(response.data);\n                        setToken(storedToken);\n                    } else {\n                        // Token is invalid, clear it\n                        localStorage.removeItem(\"token\");\n                        _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(null);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Auth initialization error:\", error);\n                localStorage.removeItem(\"token\");\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(null);\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        initAuth();\n    }, []);\n    const login = async (email, password)=>{\n        try {\n            setIsLoading(true);\n            // Development mode: Always succeed with mock user\n            if (true) {\n                const mockUser = {\n                    id: \"dev-user-123\",\n                    email: email || \"dev@serai.com\",\n                    firstName: \"Development\",\n                    lastName: \"User\",\n                    phone: \"+1 (555) 123-4567\",\n                    role: \"GUEST\",\n                    isVerified: true,\n                    isActive: true,\n                    preferences: {\n                        language: \"en\",\n                        currency: \"CAD\",\n                        timezone: \"America/Toronto\",\n                        emailNotifications: true,\n                        smsNotifications: false,\n                        pushNotifications: true\n                    }\n                };\n                const mockToken = \"dev-token-123\";\n                setUser(mockUser);\n                setToken(mockToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                localStorage.setItem(\"token\", mockToken);\n                console.log(\"\\uD83D\\uDE80 Development mode: Login successful with mock user\");\n                return {\n                    success: true\n                };\n            }\n            // Production mode: Use real API\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.login({\n                email,\n                password\n            });\n            if (response.success && response.data) {\n                const { user: userData, token: userToken, refreshToken } = response.data;\n                setUser(userData);\n                setToken(userToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(userToken);\n                // Store refresh token for future use\n                if (refreshToken) {\n                    localStorage.setItem(\"refreshToken\", refreshToken);\n                }\n                return {\n                    success: true\n                };\n            } else {\n                return {\n                    success: false,\n                    message: response.message || \"Login failed\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            return {\n                success: false,\n                message: error.message || \"Login failed\"\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const register = async (userData)=>{\n        try {\n            setIsLoading(true);\n            // Development mode: Always succeed with mock user\n            if (true) {\n                const mockUser = {\n                    id: \"dev-user-123\",\n                    email: userData.email,\n                    firstName: userData.firstName,\n                    lastName: userData.lastName,\n                    phone: userData.phone || \"+1 (555) 123-4567\",\n                    role: \"GUEST\",\n                    isVerified: true,\n                    isActive: true,\n                    preferences: {\n                        language: \"en\",\n                        currency: \"CAD\",\n                        timezone: \"America/Toronto\",\n                        emailNotifications: true,\n                        smsNotifications: false,\n                        pushNotifications: true\n                    }\n                };\n                const mockToken = \"dev-token-123\";\n                setUser(mockUser);\n                setToken(mockToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                localStorage.setItem(\"token\", mockToken);\n                console.log(\"\\uD83D\\uDE80 Development mode: Registration successful with mock user\");\n                return {\n                    success: true\n                };\n            }\n            // Production mode: Use real API\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.register(userData);\n            if (response.success && response.data) {\n                const { user: newUser, token: userToken, refreshToken } = response.data;\n                setUser(newUser);\n                setToken(userToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(userToken);\n                // Store refresh token for future use\n                if (refreshToken) {\n                    localStorage.setItem(\"refreshToken\", refreshToken);\n                }\n                return {\n                    success: true\n                };\n            } else {\n                return {\n                    success: false,\n                    message: response.message || \"Registration failed\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            return {\n                success: false,\n                message: error.message || \"Registration failed\"\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const socialLogin = async (socialData)=>{\n        try {\n            setIsLoading(true);\n            // Development mode: Always succeed with mock user\n            if (true) {\n                const mockUser = {\n                    id: \"dev-user-123\",\n                    email: socialData.email || \"dev@serai.com\",\n                    firstName: socialData.firstName || \"Development\",\n                    lastName: socialData.lastName || \"User\",\n                    phone: \"+1 (555) 123-4567\",\n                    avatar: socialData.avatar,\n                    role: \"GUEST\",\n                    isVerified: true,\n                    isActive: true,\n                    preferences: {\n                        language: \"en\",\n                        currency: \"CAD\",\n                        timezone: \"America/Toronto\",\n                        emailNotifications: true,\n                        smsNotifications: false,\n                        pushNotifications: true\n                    }\n                };\n                const mockToken = \"dev-token-123\";\n                setUser(mockUser);\n                setToken(mockToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                localStorage.setItem(\"token\", mockToken);\n                console.log(\"\\uD83D\\uDE80 Development mode: Social login successful with mock user\");\n                return {\n                    success: true\n                };\n            }\n            // Production mode: Use real API\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.socialLogin(socialData);\n            if (response.success && response.data) {\n                const { user: userData, token: userToken, refreshToken } = response.data;\n                setUser(userData);\n                setToken(userToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(userToken);\n                // Store refresh token for future use\n                if (refreshToken) {\n                    localStorage.setItem(\"refreshToken\", refreshToken);\n                }\n                return {\n                    success: true\n                };\n            } else {\n                return {\n                    success: false,\n                    message: response.message || \"Social login failed\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Social login error:\", error);\n            return {\n                success: false,\n                message: error.message || \"Social login failed\"\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const logout = async ()=>{\n        try {\n            const refreshToken = localStorage.getItem(\"refreshToken\");\n            if (refreshToken) {\n                await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.logout(refreshToken);\n            }\n        } catch (error) {\n            console.error(\"Logout error:\", error);\n        } finally{\n            setUser(null);\n            setToken(null);\n            _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(null);\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"refreshToken\");\n        }\n    };\n    const updateUser = (userData)=>{\n        if (user) {\n            setUser({\n                ...user,\n                ...userData\n            });\n        }\n    };\n    const value = {\n        user,\n        token,\n        isLoading,\n        isAuthenticated,\n        login,\n        register,\n        socialLogin,\n        logout,\n        updateUser\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/benjamin/Serai Hotels/Ben100mm-serai-hotels/frontend/src/contexts/AuthContext.tsx\",\n        lineNumber: 380,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AuthProvider, \"mX4/AXRUN66G8j/NKXHYWKblzjI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ })

});