"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/badges/page",{

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./src/lib/api.ts\");\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuth = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const isAuthenticated = !!user && !!token;\n    // Initialize auth state on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initAuth = async ()=>{\n            try {\n                // Development mode: Auto-login with mock user\n                if (true) {\n                    const mockUser = {\n                        id: \"dev-user-123\",\n                        email: \"dev@serai.com\",\n                        firstName: \"Development\",\n                        lastName: \"User\",\n                        phone: \"+1 (555) 123-4567\",\n                        role: \"GUEST\",\n                        isVerified: true,\n                        isActive: true,\n                        preferences: {\n                            language: \"en\",\n                            currency: \"CAD\",\n                            timezone: \"America/Toronto\",\n                            emailNotifications: true,\n                            smsNotifications: false,\n                            pushNotifications: true\n                        }\n                    };\n                    const mockToken = \"dev-mock-token-12345\";\n                    setUser(mockUser);\n                    setToken(mockToken);\n                    _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                    localStorage.setItem(\"token\", mockToken);\n                    console.log(\"\\uD83D\\uDE80 Development mode: Auto-logged in as mock user\");\n                    setIsLoading(false);\n                    return;\n                }\n                // Production mode: Check stored token\n                const storedToken = localStorage.getItem(\"token\");\n                if (storedToken) {\n                    _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(storedToken);\n                    const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.getMe();\n                    if (response.success && response.data) {\n                        setUser(response.data);\n                        setToken(storedToken);\n                    } else {\n                        // Token is invalid, clear it\n                        localStorage.removeItem(\"token\");\n                        _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(null);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Auth initialization error:\", error);\n                localStorage.removeItem(\"token\");\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(null);\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        initAuth();\n    }, []);\n    const login = async (email, password)=>{\n        try {\n            setIsLoading(true);\n            // Development mode: Always succeed with mock user\n            if (true) {\n                const mockUser = {\n                    id: \"dev-user-123\",\n                    email: email || \"dev@serai.com\",\n                    firstName: \"Development\",\n                    lastName: \"User\",\n                    phone: \"+1 (555) 123-4567\",\n                    role: \"GUEST\",\n                    isVerified: true,\n                    isActive: true,\n                    preferences: {\n                        language: \"en\",\n                        currency: \"CAD\",\n                        timezone: \"America/Toronto\",\n                        emailNotifications: true,\n                        smsNotifications: false,\n                        pushNotifications: true\n                    }\n                };\n                const mockToken = \"dev-mock-token-12345\";\n                setUser(mockUser);\n                setToken(mockToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                localStorage.setItem(\"token\", mockToken);\n                console.log(\"\\uD83D\\uDE80 Development mode: Login successful with mock user\");\n                return {\n                    success: true\n                };\n            }\n            // Production mode: Use real API\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.login({\n                email,\n                password\n            });\n            if (response.success && response.data) {\n                const { user: userData, token: authToken, refreshToken } = response.data;\n                setUser(userData);\n                setToken(authToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(authToken);\n                localStorage.setItem(\"token\", authToken);\n                // Store refresh token for future use\n                if (refreshToken) {\n                    localStorage.setItem(\"refreshToken\", refreshToken);\n                }\n                return {\n                    success: true\n                };\n            } else {\n                return {\n                    success: false,\n                    message: response.message || \"Login failed\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            return {\n                success: false,\n                message: \"An error occurred during login\"\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const register = async (userData)=>{\n        try {\n            setIsLoading(true);\n            // Development mode: Always succeed with mock user\n            if (true) {\n                const mockUser = {\n                    id: \"dev-user-123\",\n                    email: userData.email,\n                    firstName: userData.firstName,\n                    lastName: userData.lastName,\n                    phone: userData.phone || \"+1 (555) 123-4567\",\n                    role: \"GUEST\",\n                    isVerified: true,\n                    isActive: true,\n                    preferences: {\n                        language: \"en\",\n                        currency: \"CAD\",\n                        timezone: \"America/Toronto\",\n                        emailNotifications: true,\n                        smsNotifications: false,\n                        pushNotifications: true\n                    }\n                };\n                const mockToken = \"dev-mock-token-12345\";\n                setUser(mockUser);\n                setToken(mockToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                localStorage.setItem(\"token\", mockToken);\n                console.log(\"\\uD83D\\uDE80 Development mode: Registration successful with mock user\");\n                return {\n                    success: true\n                };\n            }\n            // Production mode: Use real API\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.register(userData);\n            if (response.success && response.data) {\n                const { user: userData, token: authToken, refreshToken } = response.data;\n                setUser(userData);\n                setToken(authToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(authToken);\n                localStorage.setItem(\"token\", authToken);\n                // Store refresh token for future use\n                if (refreshToken) {\n                    localStorage.setItem(\"refreshToken\", refreshToken);\n                }\n                return {\n                    success: true\n                };\n            } else {\n                return {\n                    success: false,\n                    message: response.message || \"Registration failed\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            return {\n                success: false,\n                message: \"An error occurred during registration\"\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const socialLogin = async (socialData)=>{\n        try {\n            setIsLoading(true);\n            // Development mode: Always succeed with mock user\n            if (true) {\n                const mockUser = {\n                    id: \"dev-user-123\",\n                    email: socialData.email || \"dev@serai.com\",\n                    firstName: socialData.firstName || \"Development\",\n                    lastName: socialData.lastName || \"User\",\n                    phone: \"+1 (555) 123-4567\",\n                    avatar: socialData.avatar,\n                    role: \"GUEST\",\n                    isVerified: true,\n                    isActive: true,\n                    preferences: {\n                        language: \"en\",\n                        currency: \"CAD\",\n                        timezone: \"America/Toronto\",\n                        emailNotifications: true,\n                        smsNotifications: false,\n                        pushNotifications: true\n                    }\n                };\n                const mockToken = \"dev-mock-token-12345\";\n                setUser(mockUser);\n                setToken(mockToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(mockToken);\n                localStorage.setItem(\"token\", mockToken);\n                console.log(\"\\uD83D\\uDE80 Development mode: Social login successful with mock user\");\n                return {\n                    success: true\n                };\n            }\n            // Production mode: Use real API\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.socialLogin(socialData);\n            if (response.success && response.data) {\n                const { user: userData, token: authToken, refreshToken } = response.data;\n                setUser(userData);\n                setToken(authToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(authToken);\n                localStorage.setItem(\"token\", authToken);\n                // Store refresh token for future use\n                if (refreshToken) {\n                    localStorage.setItem(\"refreshToken\", refreshToken);\n                }\n                return {\n                    success: true\n                };\n            } else {\n                return {\n                    success: false,\n                    message: response.message || \"Social login failed\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Social login error:\", error);\n            return {\n                success: false,\n                message: \"An error occurred during social login\"\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const logout = async ()=>{\n        try {\n            const refreshToken = localStorage.getItem(\"refreshToken\");\n            if (refreshToken) {\n                await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.logout(refreshToken);\n            }\n        } catch (error) {\n            console.error(\"Logout error:\", error);\n        } finally{\n            setUser(null);\n            setToken(null);\n            _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(null);\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"refreshToken\");\n        }\n    };\n    const refreshToken = async ()=>{\n        try {\n            const storedRefreshToken = localStorage.getItem(\"refreshToken\");\n            if (!storedRefreshToken) {\n                return false;\n            }\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.refreshToken(storedRefreshToken);\n            if (response.success && response.data) {\n                const { token: newToken, refreshToken: newRefreshToken } = response.data;\n                setToken(newToken);\n                _lib_api__WEBPACK_IMPORTED_MODULE_2__.apiClient.setToken(newToken);\n                localStorage.setItem(\"token\", newToken);\n                if (newRefreshToken) {\n                    localStorage.setItem(\"refreshToken\", newRefreshToken);\n                }\n                return true;\n            } else {\n                // Refresh token is invalid, logout user\n                await logout();\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Token refresh error:\", error);\n            await logout();\n            return false;\n        }\n    };\n    const value = {\n        user,\n        token,\n        isLoading,\n        isAuthenticated,\n        login,\n        register,\n        socialLogin,\n        logout,\n        refreshToken\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/benjamin/Serai Hotels/Ben100mm-serai-hotels/frontend/src/contexts/AuthContext.tsx\",\n        lineNumber: 410,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AuthProvider, \"mX4/AXRUN66G8j/NKXHYWKblzjI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFeUY7QUFDdEM7QUFxRG5ELE1BQU1NLDRCQUFjTCxvREFBYUEsQ0FBOEJNO0FBRXhELE1BQU1DLFVBQVU7O0lBQ3JCLE1BQU1DLFVBQVVQLGlEQUFVQSxDQUFDSTtJQUMzQixJQUFJRyxZQUFZRixXQUFXO1FBQ3pCLE1BQU0sSUFBSUcsTUFBTTtJQUNsQjtJQUNBLE9BQU9EO0FBQ1QsRUFBRTtHQU5XRDtBQVlOLE1BQU1HLGVBQTRDO1FBQUMsRUFBRUMsUUFBUSxFQUFFOztJQUNwRSxNQUFNLENBQUNDLE1BQU1DLFFBQVEsR0FBR1YsK0NBQVFBLENBQWM7SUFDOUMsTUFBTSxDQUFDVyxPQUFPQyxTQUFTLEdBQUdaLCtDQUFRQSxDQUFnQjtJQUNsRCxNQUFNLENBQUNhLFdBQVdDLGFBQWEsR0FBR2QsK0NBQVFBLENBQUM7SUFFM0MsTUFBTWUsa0JBQWtCLENBQUMsQ0FBQ04sUUFBUSxDQUFDLENBQUNFO0lBRXBDLGlDQUFpQztJQUNqQ1osZ0RBQVNBLENBQUM7UUFDUixNQUFNaUIsV0FBVztZQUNmLElBQUk7Z0JBQ0YsOENBQThDO2dCQUM5QyxJQUFJQyxJQUF5QixFQUFlO29CQUMxQyxNQUFNQyxXQUFpQjt3QkFDckJDLElBQUk7d0JBQ0pDLE9BQU87d0JBQ1BDLFdBQVc7d0JBQ1hDLFVBQVU7d0JBQ1ZDLE9BQU87d0JBQ1BDLE1BQU07d0JBQ05DLFlBQVk7d0JBQ1pDLFVBQVU7d0JBQ1ZDLGFBQWE7NEJBQ1hDLFVBQVU7NEJBQ1ZDLFVBQVU7NEJBQ1ZDLFVBQVU7NEJBQ1ZDLG9CQUFvQjs0QkFDcEJDLGtCQUFrQjs0QkFDbEJDLG1CQUFtQjt3QkFDckI7b0JBQ0Y7b0JBRUEsTUFBTUMsWUFBWTtvQkFFbEJ4QixRQUFRUTtvQkFDUk4sU0FBU3NCO29CQUNUakMsK0NBQVNBLENBQUNXLFFBQVEsQ0FBQ3NCO29CQUNuQkMsYUFB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QUFTQSxDQUFDVyxRQUFRLENBQUMrQztnQkFDbkJ4QixhQUFhQyxPQUFPLENBQUMsU0FBU3VCO2dCQUU5QixJQUFJQyxpQkFBaUI7b0JBQ25CekIsYUFBYUMsT0FBTyxDQUFDLGdCQUFnQndCO2dCQUN2QztnQkFFQSxPQUFPO1lBQ1QsT0FBTztnQkFDTCx3Q0FBd0M7Z0JBQ3hDLE1BQU1IO2dCQUNOLE9BQU87WUFDVDtRQUNGLEVBQUUsT0FBT1gsT0FBTztZQUNkVCxRQUFRUyxLQUFLLENBQUMsd0JBQXdCQTtZQUN0QyxNQUFNVztZQUNOLE9BQU87UUFDVDtJQUNGO0lBRUEsTUFBTUksUUFBeUI7UUFDN0JwRDtRQUNBRTtRQUNBRTtRQUNBRTtRQUNBZ0M7UUFDQU07UUFDQUM7UUFDQUc7UUFDQU47SUFDRjtJQUVBLHFCQUNFLDhEQUFDakQsWUFBWTRELFFBQVE7UUFBQ0QsT0FBT0E7a0JBQzFCckQ7Ozs7OztBQUdQLEVBQUU7SUF2VldEO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dC50c3g/MWZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhcGlDbGllbnQsIEFwaVJlc3BvbnNlIH0gZnJvbSAnQC9saWIvYXBpJztcblxuaW50ZXJmYWNlIEF1dGhSZXNwb25zZSB7XG4gIHVzZXI6IFVzZXI7XG4gIHRva2VuOiBzdHJpbmc7XG4gIHJlZnJlc2hUb2tlbj86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFVzZXIge1xuICBpZDogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcbiAgcGhvbmU/OiBzdHJpbmc7XG4gIGF2YXRhcj86IHN0cmluZztcbiAgcm9sZTogJ0dVRVNUJyB8ICdIT1NUJyB8ICdBRE1JTicgfCAnU1VQRVJfQURNSU4nO1xuICBpc1ZlcmlmaWVkOiBib29sZWFuO1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgcHJlZmVyZW5jZXM/OiB7XG4gICAgbGFuZ3VhZ2U6IHN0cmluZztcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xuICAgIHRpbWV6b25lOiBzdHJpbmc7XG4gICAgZW1haWxOb3RpZmljYXRpb25zOiBib29sZWFuO1xuICAgIHNtc05vdGlmaWNhdGlvbnM6IGJvb2xlYW47XG4gICAgcHVzaE5vdGlmaWNhdGlvbnM6IGJvb2xlYW47XG4gIH07XG59XG5cbmludGVyZmFjZSBBdXRoQ29udGV4dFR5cGUge1xuICB1c2VyOiBVc2VyIHwgbnVsbDtcbiAgdG9rZW46IHN0cmluZyB8IG51bGw7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xuICBsb2dpbjogKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nIH0+O1xuICByZWdpc3RlcjogKHVzZXJEYXRhOiB7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lOiBzdHJpbmc7XG4gICAgcGhvbmU/OiBzdHJpbmc7XG4gIH0pID0+IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nIH0+O1xuICBzb2NpYWxMb2dpbjogKHNvY2lhbERhdGE6IHtcbiAgICBwcm92aWRlcjogJ2dvb2dsZScgfCAnZmFjZWJvb2snIHwgJ2FwcGxlJztcbiAgICBwcm92aWRlcklkOiBzdHJpbmc7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcbiAgICBsYXN0TmFtZTogc3RyaW5nO1xuICAgIGF2YXRhcj86IHN0cmluZztcbiAgfSkgPT4gUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmcgfT47XG4gIGxvZ291dDogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgcmVmcmVzaFRva2VuOiAoKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xufVxuXG5jb25zdCBBdXRoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8QXV0aENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5leHBvcnQgY29uc3QgdXNlQXV0aCA9ICgpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoQXV0aENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VBdXRoIG11c3QgYmUgdXNlZCB3aXRoaW4gYW4gQXV0aFByb3ZpZGVyJyk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5pbnRlcmZhY2UgQXV0aFByb3ZpZGVyUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgY29uc3QgQXV0aFByb3ZpZGVyOiBSZWFjdC5GQzxBdXRoUHJvdmlkZXJQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlPFVzZXIgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3Rva2VuLCBzZXRUb2tlbl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIGNvbnN0IGlzQXV0aGVudGljYXRlZCA9ICEhdXNlciAmJiAhIXRva2VuO1xuXG4gIC8vIEluaXRpYWxpemUgYXV0aCBzdGF0ZSBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGluaXRBdXRoID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gRGV2ZWxvcG1lbnQgbW9kZTogQXV0by1sb2dpbiB3aXRoIG1vY2sgdXNlclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBjb25zdCBtb2NrVXNlcjogVXNlciA9IHtcbiAgICAgICAgICAgIGlkOiAnZGV2LXVzZXItMTIzJyxcbiAgICAgICAgICAgIGVtYWlsOiAnZGV2QHNlcmFpLmNvbScsXG4gICAgICAgICAgICBmaXJzdE5hbWU6ICdEZXZlbG9wbWVudCcsXG4gICAgICAgICAgICBsYXN0TmFtZTogJ1VzZXInLFxuICAgICAgICAgICAgcGhvbmU6ICcrMSAoNTU1KSAxMjMtNDU2NycsXG4gICAgICAgICAgICByb2xlOiAnR1VFU1QnLFxuICAgICAgICAgICAgaXNWZXJpZmllZDogdHJ1ZSxcbiAgICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgcHJlZmVyZW5jZXM6IHtcbiAgICAgICAgICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICAgICAgICAgIGN1cnJlbmN5OiAnQ0FEJyxcbiAgICAgICAgICAgICAgdGltZXpvbmU6ICdBbWVyaWNhL1Rvcm9udG8nLFxuICAgICAgICAgICAgICBlbWFpbE5vdGlmaWNhdGlvbnM6IHRydWUsXG4gICAgICAgICAgICAgIHNtc05vdGlmaWNhdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICBwdXNoTm90aWZpY2F0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IG1vY2tUb2tlbiA9ICdkZXYtbW9jay10b2tlbi0xMjM0NSc7XG5cbiAgICAgICAgICBzZXRVc2VyKG1vY2tVc2VyKTtcbiAgICAgICAgICBzZXRUb2tlbihtb2NrVG9rZW4pO1xuICAgICAgICAgIGFwaUNsaWVudC5zZXRUb2tlbihtb2NrVG9rZW4pO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIG1vY2tUb2tlbik7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc29sZS5sb2coJ/CfmoAgRGV2ZWxvcG1lbnQgbW9kZTogQXV0by1sb2dnZWQgaW4gYXMgbW9jayB1c2VyJyk7XG4gICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcm9kdWN0aW9uIG1vZGU6IENoZWNrIHN0b3JlZCB0b2tlblxuICAgICAgICBjb25zdCBzdG9yZWRUb2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpO1xuICAgICAgICBpZiAoc3RvcmVkVG9rZW4pIHtcbiAgICAgICAgICBhcGlDbGllbnQuc2V0VG9rZW4oc3RvcmVkVG9rZW4pO1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LmdldE1lKCkgYXMgQXBpUmVzcG9uc2U8VXNlcj47XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgICAgc2V0VXNlcihyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIHNldFRva2VuKHN0b3JlZFRva2VuKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVG9rZW4gaXMgaW52YWxpZCwgY2xlYXIgaXRcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xuICAgICAgICAgICAgYXBpQ2xpZW50LnNldFRva2VuKG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQXV0aCBpbml0aWFsaXphdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xuICAgICAgICBhcGlDbGllbnQuc2V0VG9rZW4obnVsbCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpbml0QXV0aCgpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgbG9naW4gPSBhc3luYyAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIERldmVsb3BtZW50IG1vZGU6IEFsd2F5cyBzdWNjZWVkIHdpdGggbW9jayB1c2VyXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29uc3QgbW9ja1VzZXI6IFVzZXIgPSB7XG4gICAgICAgICAgaWQ6ICdkZXYtdXNlci0xMjMnLFxuICAgICAgICAgIGVtYWlsOiBlbWFpbCB8fCAnZGV2QHNlcmFpLmNvbScsXG4gICAgICAgICAgZmlyc3ROYW1lOiAnRGV2ZWxvcG1lbnQnLFxuICAgICAgICAgIGxhc3ROYW1lOiAnVXNlcicsXG4gICAgICAgICAgcGhvbmU6ICcrMSAoNTU1KSAxMjMtNDU2NycsXG4gICAgICAgICAgcm9sZTogJ0dVRVNUJyxcbiAgICAgICAgICBpc1ZlcmlmaWVkOiB0cnVlLFxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgICAgICBsYW5ndWFnZTogJ2VuJyxcbiAgICAgICAgICAgIGN1cnJlbmN5OiAnQ0FEJyxcbiAgICAgICAgICAgIHRpbWV6b25lOiAnQW1lcmljYS9Ub3JvbnRvJyxcbiAgICAgICAgICAgIGVtYWlsTm90aWZpY2F0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgIHNtc05vdGlmaWNhdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgcHVzaE5vdGlmaWNhdGlvbnM6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtb2NrVG9rZW4gPSAnZGV2LW1vY2stdG9rZW4tMTIzNDUnO1xuXG4gICAgICAgIHNldFVzZXIobW9ja1VzZXIpO1xuICAgICAgICBzZXRUb2tlbihtb2NrVG9rZW4pO1xuICAgICAgICBhcGlDbGllbnQuc2V0VG9rZW4obW9ja1Rva2VuKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgbW9ja1Rva2VuKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5qAIERldmVsb3BtZW50IG1vZGU6IExvZ2luIHN1Y2Nlc3NmdWwgd2l0aCBtb2NrIHVzZXInKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBQcm9kdWN0aW9uIG1vZGU6IFVzZSByZWFsIEFQSVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlDbGllbnQubG9naW4oeyBlbWFpbCwgcGFzc3dvcmQgfSkgYXMgQXBpUmVzcG9uc2U8QXV0aFJlc3BvbnNlPjtcbiAgICAgIFxuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICBjb25zdCB7IHVzZXI6IHVzZXJEYXRhLCB0b2tlbjogYXV0aFRva2VuLCByZWZyZXNoVG9rZW4gfSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIFxuICAgICAgICBzZXRVc2VyKHVzZXJEYXRhKTtcbiAgICAgICAgc2V0VG9rZW4oYXV0aFRva2VuKTtcbiAgICAgICAgYXBpQ2xpZW50LnNldFRva2VuKGF1dGhUb2tlbik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIGF1dGhUb2tlbik7XG4gICAgICAgIFxuICAgICAgICAvLyBTdG9yZSByZWZyZXNoIHRva2VuIGZvciBmdXR1cmUgdXNlXG4gICAgICAgIGlmIChyZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncmVmcmVzaFRva2VuJywgcmVmcmVzaFRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IHJlc3BvbnNlLm1lc3NhZ2UgfHwgJ0xvZ2luIGZhaWxlZCcgfTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignTG9naW4gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgbG9naW4nIH07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlZ2lzdGVyID0gYXN5bmMgKHVzZXJEYXRhOiB7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lOiBzdHJpbmc7XG4gICAgcGhvbmU/OiBzdHJpbmc7XG4gIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgXG4gICAgICAvLyBEZXZlbG9wbWVudCBtb2RlOiBBbHdheXMgc3VjY2VlZCB3aXRoIG1vY2sgdXNlclxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgIGNvbnN0IG1vY2tVc2VyOiBVc2VyID0ge1xuICAgICAgICAgIGlkOiAnZGV2LXVzZXItMTIzJyxcbiAgICAgICAgICBlbWFpbDogdXNlckRhdGEuZW1haWwsXG4gICAgICAgICAgZmlyc3ROYW1lOiB1c2VyRGF0YS5maXJzdE5hbWUsXG4gICAgICAgICAgbGFzdE5hbWU6IHVzZXJEYXRhLmxhc3ROYW1lLFxuICAgICAgICAgIHBob25lOiB1c2VyRGF0YS5waG9uZSB8fCAnKzEgKDU1NSkgMTIzLTQ1NjcnLFxuICAgICAgICAgIHJvbGU6ICdHVUVTVCcsXG4gICAgICAgICAgaXNWZXJpZmllZDogdHJ1ZSxcbiAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICBwcmVmZXJlbmNlczoge1xuICAgICAgICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICAgICAgICBjdXJyZW5jeTogJ0NBRCcsXG4gICAgICAgICAgICB0aW1lem9uZTogJ0FtZXJpY2EvVG9yb250bycsXG4gICAgICAgICAgICBlbWFpbE5vdGlmaWNhdGlvbnM6IHRydWUsXG4gICAgICAgICAgICBzbXNOb3RpZmljYXRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgIHB1c2hOb3RpZmljYXRpb25zOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbW9ja1Rva2VuID0gJ2Rldi1tb2NrLXRva2VuLTEyMzQ1JztcblxuICAgICAgICBzZXRVc2VyKG1vY2tVc2VyKTtcbiAgICAgICAgc2V0VG9rZW4obW9ja1Rva2VuKTtcbiAgICAgICAgYXBpQ2xpZW50LnNldFRva2VuKG1vY2tUb2tlbik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIG1vY2tUb2tlbik7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygn8J+agCBEZXZlbG9wbWVudCBtb2RlOiBSZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCB3aXRoIG1vY2sgdXNlcicpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFByb2R1Y3Rpb24gbW9kZTogVXNlIHJlYWwgQVBJXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5yZWdpc3Rlcih1c2VyRGF0YSkgYXMgQXBpUmVzcG9uc2U8QXV0aFJlc3BvbnNlPjtcbiAgICAgIFxuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICBjb25zdCB7IHVzZXI6IHVzZXJEYXRhLCB0b2tlbjogYXV0aFRva2VuLCByZWZyZXNoVG9rZW4gfSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIFxuICAgICAgICBzZXRVc2VyKHVzZXJEYXRhKTtcbiAgICAgICAgc2V0VG9rZW4oYXV0aFRva2VuKTtcbiAgICAgICAgYXBpQ2xpZW50LnNldFRva2VuKGF1dGhUb2tlbik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIGF1dGhUb2tlbik7XG4gICAgICAgIFxuICAgICAgICAvLyBTdG9yZSByZWZyZXNoIHRva2VuIGZvciBmdXR1cmUgdXNlXG4gICAgICAgIGlmIChyZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncmVmcmVzaFRva2VuJywgcmVmcmVzaFRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IHJlc3BvbnNlLm1lc3NhZ2UgfHwgJ1JlZ2lzdHJhdGlvbiBmYWlsZWQnIH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlZ2lzdHJhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ0FuIGVycm9yIG9jY3VycmVkIGR1cmluZyByZWdpc3RyYXRpb24nIH07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHNvY2lhbExvZ2luID0gYXN5bmMgKHNvY2lhbERhdGE6IHtcbiAgICBwcm92aWRlcjogJ2dvb2dsZScgfCAnZmFjZWJvb2snIHwgJ2FwcGxlJztcbiAgICBwcm92aWRlcklkOiBzdHJpbmc7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcbiAgICBsYXN0TmFtZTogc3RyaW5nO1xuICAgIGF2YXRhcj86IHN0cmluZztcbiAgfSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIERldmVsb3BtZW50IG1vZGU6IEFsd2F5cyBzdWNjZWVkIHdpdGggbW9jayB1c2VyXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29uc3QgbW9ja1VzZXI6IFVzZXIgPSB7XG4gICAgICAgICAgaWQ6ICdkZXYtdXNlci0xMjMnLFxuICAgICAgICAgIGVtYWlsOiBzb2NpYWxEYXRhLmVtYWlsIHx8ICdkZXZAc2VyYWkuY29tJyxcbiAgICAgICAgICBmaXJzdE5hbWU6IHNvY2lhbERhdGEuZmlyc3ROYW1lIHx8ICdEZXZlbG9wbWVudCcsXG4gICAgICAgICAgbGFzdE5hbWU6IHNvY2lhbERhdGEubGFzdE5hbWUgfHwgJ1VzZXInLFxuICAgICAgICAgIHBob25lOiAnKzEgKDU1NSkgMTIzLTQ1NjcnLFxuICAgICAgICAgIGF2YXRhcjogc29jaWFsRGF0YS5hdmF0YXIsXG4gICAgICAgICAgcm9sZTogJ0dVRVNUJyxcbiAgICAgICAgICBpc1ZlcmlmaWVkOiB0cnVlLFxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgICAgICBsYW5ndWFnZTogJ2VuJyxcbiAgICAgICAgICAgIGN1cnJlbmN5OiAnQ0FEJyxcbiAgICAgICAgICAgIHRpbWV6b25lOiAnQW1lcmljYS9Ub3JvbnRvJyxcbiAgICAgICAgICAgIGVtYWlsTm90aWZpY2F0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgIHNtc05vdGlmaWNhdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgcHVzaE5vdGlmaWNhdGlvbnM6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtb2NrVG9rZW4gPSAnZGV2LW1vY2stdG9rZW4tMTIzNDUnO1xuXG4gICAgICAgIHNldFVzZXIobW9ja1VzZXIpO1xuICAgICAgICBzZXRUb2tlbihtb2NrVG9rZW4pO1xuICAgICAgICBhcGlDbGllbnQuc2V0VG9rZW4obW9ja1Rva2VuKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgbW9ja1Rva2VuKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5qAIERldmVsb3BtZW50IG1vZGU6IFNvY2lhbCBsb2dpbiBzdWNjZXNzZnVsIHdpdGggbW9jayB1c2VyJyk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUHJvZHVjdGlvbiBtb2RlOiBVc2UgcmVhbCBBUElcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnNvY2lhbExvZ2luKHNvY2lhbERhdGEpIGFzIEFwaVJlc3BvbnNlPEF1dGhSZXNwb25zZT47XG4gICAgICBcbiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgY29uc3QgeyB1c2VyOiB1c2VyRGF0YSwgdG9rZW46IGF1dGhUb2tlbiwgcmVmcmVzaFRva2VuIH0gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICBcbiAgICAgICAgc2V0VXNlcih1c2VyRGF0YSk7XG4gICAgICAgIHNldFRva2VuKGF1dGhUb2tlbik7XG4gICAgICAgIGFwaUNsaWVudC5zZXRUb2tlbihhdXRoVG9rZW4pO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW4nLCBhdXRoVG9rZW4pO1xuICAgICAgICBcbiAgICAgICAgLy8gU3RvcmUgcmVmcmVzaCB0b2tlbiBmb3IgZnV0dXJlIHVzZVxuICAgICAgICBpZiAocmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3JlZnJlc2hUb2tlbicsIHJlZnJlc2hUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiByZXNwb25zZS5tZXNzYWdlIHx8ICdTb2NpYWwgbG9naW4gZmFpbGVkJyB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdTb2NpYWwgbG9naW4gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc29jaWFsIGxvZ2luJyB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBsb2dvdXQgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyZWZyZXNoVG9rZW4nKTtcbiAgICAgIGlmIChyZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgYXdhaXQgYXBpQ2xpZW50LmxvZ291dChyZWZyZXNoVG9rZW4pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdMb2dvdXQgZXJyb3I6JywgZXJyb3IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRVc2VyKG51bGwpO1xuICAgICAgc2V0VG9rZW4obnVsbCk7XG4gICAgICBhcGlDbGllbnQuc2V0VG9rZW4obnVsbCk7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdyZWZyZXNoVG9rZW4nKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVmcmVzaFRva2VuID0gYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdG9yZWRSZWZyZXNoVG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVmcmVzaFRva2VuJyk7XG4gICAgICBpZiAoIXN0b3JlZFJlZnJlc2hUb2tlbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnJlZnJlc2hUb2tlbihzdG9yZWRSZWZyZXNoVG9rZW4pIGFzIEFwaVJlc3BvbnNlPHsgdG9rZW46IHN0cmluZzsgcmVmcmVzaFRva2VuPzogc3RyaW5nIH0+O1xuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyAmJiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgdG9rZW46IG5ld1Rva2VuLCByZWZyZXNoVG9rZW46IG5ld1JlZnJlc2hUb2tlbiB9ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgXG4gICAgICAgIHNldFRva2VuKG5ld1Rva2VuKTtcbiAgICAgICAgYXBpQ2xpZW50LnNldFRva2VuKG5ld1Rva2VuKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgbmV3VG9rZW4pO1xuICAgICAgICBcbiAgICAgICAgaWYgKG5ld1JlZnJlc2hUb2tlbikge1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyZWZyZXNoVG9rZW4nLCBuZXdSZWZyZXNoVG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlZnJlc2ggdG9rZW4gaXMgaW52YWxpZCwgbG9nb3V0IHVzZXJcbiAgICAgICAgYXdhaXQgbG9nb3V0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignVG9rZW4gcmVmcmVzaCBlcnJvcjonLCBlcnJvcik7XG4gICAgICBhd2FpdCBsb2dvdXQoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdmFsdWU6IEF1dGhDb250ZXh0VHlwZSA9IHtcbiAgICB1c2VyLFxuICAgIHRva2VuLFxuICAgIGlzTG9hZGluZyxcbiAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgbG9naW4sXG4gICAgcmVnaXN0ZXIsXG4gICAgc29jaWFsTG9naW4sXG4gICAgbG9nb3V0LFxuICAgIHJlZnJlc2hUb2tlbixcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxBdXRoQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dmFsdWV9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQXV0aENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59OyJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJhcGlDbGllbnQiLCJBdXRoQ29udGV4dCIsInVuZGVmaW5lZCIsInVzZUF1dGgiLCJjb250ZXh0IiwiRXJyb3IiLCJBdXRoUHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZXIiLCJzZXRVc2VyIiwidG9rZW4iLCJzZXRUb2tlbiIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImlzQXV0aGVudGljYXRlZCIsImluaXRBdXRoIiwicHJvY2VzcyIsIm1vY2tVc2VyIiwiaWQiLCJlbWFpbCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwicGhvbmUiLCJyb2xlIiwiaXNWZXJpZmllZCIsImlzQWN0aXZlIiwicHJlZmVyZW5jZXMiLCJsYW5ndWFnZSIsImN1cnJlbmN5IiwidGltZXpvbmUiLCJlbWFpbE5vdGlmaWNhdGlvbnMiLCJzbXNOb3RpZmljYXRpb25zIiwicHVzaE5vdGlmaWNhdGlvbnMiLCJtb2NrVG9rZW4iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiY29uc29sZSIsImxvZyIsInN0b3JlZFRva2VuIiwiZ2V0SXRlbSIsInJlc3BvbnNlIiwiZ2V0TWUiLCJzdWNjZXNzIiwiZGF0YSIsInJlbW92ZUl0ZW0iLCJlcnJvciIsImxvZ2luIiwicGFzc3dvcmQiLCJ1c2VyRGF0YSIsImF1dGhUb2tlbiIsInJlZnJlc2hUb2tlbiIsIm1lc3NhZ2UiLCJyZWdpc3RlciIsInNvY2lhbExvZ2luIiwic29jaWFsRGF0YSIsImF2YXRhciIsImxvZ291dCIsInN0b3JlZFJlZnJlc2hUb2tlbiIsIm5ld1Rva2VuIiwibmV3UmVmcmVzaFRva2VuIiwidmFsdWUiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ })

});