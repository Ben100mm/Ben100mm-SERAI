'use client';

import Image from 'next/image';
import { useState, useRef, useEffect } from 'react';
import { ArrowLeft, Globe, Menu, ChevronDown, Heart, Star, ChevronRight, Clock } from 'lucide-react';
import Link from 'next/link';

export default function PropertiesPage() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isLanguageModalOpen, setIsLanguageModalOpen] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('English (Canada)');
  const [isTranslationEnabled, setIsTranslationEnabled] = useState(true);
  const [activeTab, setActiveTab] = useState('language');
  const [selectedCurrency, setSelectedCurrency] = useState('Canadian dollar (CAD - $)');
  const [isListingModalOpen, setIsListingModalOpen] = useState(false);
  const [activeNavTab, setActiveNavTab] = useState('silk-route');
  const [isWhereDropdownOpen, setIsWhereDropdownOpen] = useState(false);
  const [whereValue, setWhereValue] = useState('');
  const [isCheckInDropdownOpen, setIsCheckInDropdownOpen] = useState(false);
  const [isCheckOutDropdownOpen, setIsCheckOutDropdownOpen] = useState(false);
  const [checkInValue, setCheckInValue] = useState('');
  const [checkOutValue, setCheckOutValue] = useState('');
  const [selectedDates, setSelectedDates] = useState<{checkIn: Date | null, checkOut: Date | null}>({
    checkIn: null,
    checkOut: null
  });
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [flexibleOption, setFlexibleOption] = useState('Exact dates');
  const [activeCalendarTab, setActiveCalendarTab] = useState('dates');
  const [selectedMonths, setSelectedMonths] = useState(3);
  const [isDragging, setIsDragging] = useState(false);
  const [selectedDuration, setSelectedDuration] = useState('Month');
  const [selectedFlexibleMonth, setSelectedFlexibleMonth] = useState(new Date());
  const menuRef = useRef<HTMLDivElement>(null);
  const languageModalRef = useRef<HTMLDivElement>(null);
  const listingModalRef = useRef<HTMLDivElement>(null);
  const whereDropdownRef = useRef<HTMLDivElement>(null);
  const checkInDropdownRef = useRef<HTMLDivElement>(null);
  const checkOutDropdownRef = useRef<HTMLDivElement>(null);
  const circleRef = useRef<HTMLDivElement>(null);
  const monthScrollRef = useRef<HTMLDivElement>(null);

  // Dynamic search bar based on active tab
  const renderSearchBar = () => {
    switch (activeNavTab) {
      case 'silk-route':
        return (
          <div className="flex items-center bg-white border border-gray-300 rounded-full shadow-sm hover:shadow-md transition-shadow">
            {/* Route Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Route</label>
              <input
                type="text"
                placeholder="Plan your journey"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Duration Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Duration</label>
              <input
                type="text"
                placeholder="7-14 days"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Interests Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Interests</label>
              <input
                type="text"
                placeholder="Culture, nature, food"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Search Button */}
            <div className="px-6 py-3">
              <button className="bg-gradient-to-r from-red-800 to-red-900 hover:from-red-900 hover:to-red-950 text-white p-3 rounded-full shadow-lg transition-all duration-200">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>
          </div>
        );
      
      case 'serais':
        return (
          <div className="flex items-center bg-white border border-gray-300 rounded-full shadow-sm hover:shadow-md transition-shadow">
            {/* Where Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative" ref={whereDropdownRef}>
              <label className="block text-xs font-semibold text-gray-900 mb-1">Where</label>
              <input
                type="text"
                placeholder="Search destinations"
                value={whereValue}
                onChange={(e) => setWhereValue(e.target.value)}
                onFocus={() => setIsWhereDropdownOpen(true)}
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Check In Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative" ref={checkInDropdownRef}>
              <label className="block text-xs font-semibold text-gray-900 mb-1">Check in</label>
              <input
                type="text"
                placeholder="Add dates"
                value={checkInValue}
                onChange={(e) => setCheckInValue(e.target.value)}
                onFocus={() => setIsCheckInDropdownOpen(true)}
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Check Out Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative" ref={checkOutDropdownRef}>
              <label className="block text-xs font-semibold text-gray-900 mb-1">Check out</label>
              <input
                type="text"
                placeholder="Add dates"
                value={checkOutValue}
                onChange={(e) => setCheckOutValue(e.target.value)}
                onFocus={() => setIsCheckOutDropdownOpen(true)}
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Who Field */}
            <div className="flex-1 px-6 py-3">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Who</label>
              <input
                type="text"
                placeholder="Add guests"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Search Button */}
            <div className="px-6 py-3">
              <button className="bg-gradient-to-r from-red-800 to-red-900 hover:from-red-900 hover:to-red-950 text-white p-3 rounded-full shadow-lg transition-all duration-200">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>
          </div>
        );
      
      case 'bazaar':
        return (
          <div className="flex items-center bg-white border border-gray-300 rounded-full shadow-sm hover:shadow-md transition-shadow">
            {/* Experience Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Experience</label>
              <input
                type="text"
                placeholder="What do you want to do?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Location Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Location</label>
              <input
                type="text"
                placeholder="Where?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Date Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Date</label>
              <input
                type="text"
                placeholder="When?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Group Size Field */}
            <div className="flex-1 px-6 py-3">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Group</label>
              <input
                type="text"
                placeholder="How many?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Search Button */}
            <div className="px-6 py-3">
              <button className="bg-gradient-to-r from-red-800 to-red-900 hover:from-red-900 hover:to-red-950 text-white p-3 rounded-full shadow-lg transition-all duration-200">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>
          </div>
        );
      
      case 'essentials':
        return (
          <div className="flex items-center bg-white border border-gray-300 rounded-full shadow-sm hover:shadow-md transition-shadow">
            {/* Service Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Service</label>
              <input
                type="text"
                placeholder="What do you need?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Location Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Location</label>
              <input
                type="text"
                placeholder="Where are you?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Time Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Time</label>
              <input
                type="text"
                placeholder="When do you need it?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Provider Field */}
            <div className="flex-1 px-6 py-3">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Provider</label>
              <input
                type="text"
                placeholder="Any preferences?"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Search Button */}
            <div className="px-6 py-3">
              <button className="bg-gradient-to-r from-red-800 to-red-900 hover:from-red-900 hover:to-red-950 text-white p-3 rounded-full shadow-lg transition-all duration-200">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  // Close menu when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsMenuOpen(false);
      }
      if (languageModalRef.current && !languageModalRef.current.contains(event.target as Node)) {
        setIsLanguageModalOpen(false);
      }
      if (listingModalRef.current && !listingModalRef.current.contains(event.target as Node)) {
        setIsListingModalOpen(false);
      }
      if (whereDropdownRef.current && !whereDropdownRef.current.contains(event.target as Node)) {
        setIsWhereDropdownOpen(false);
      }
      if (checkInDropdownRef.current && !checkInDropdownRef.current.contains(event.target as Node)) {
        setIsCheckInDropdownOpen(false);
      }
      if (checkOutDropdownRef.current && !checkOutDropdownRef.current.contains(event.target as Node)) {
        setIsCheckOutDropdownOpen(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const languages = [
    { code: 'az', name: 'Azərbaycan dili', country: 'Azərbaycan' },
    { code: 'id', name: 'Bahasa Indonesia', country: 'Indonesia' },
    { code: 'bs', name: 'Bosanski', country: 'Bosna i Hercegovina' },
    { code: 'ca', name: 'Català', country: 'Espanya' },
    { code: 'cs', name: 'Čeština', country: 'Česká republika' },
    { code: 'cnr', name: 'Crnogorski', country: 'Crna Gora' },
    { code: 'da', name: 'Dansk', country: 'Danmark' },
    { code: 'de', name: 'Deutsch', country: 'Deutschland' },
    { code: 'de-at', name: 'Deutsch', country: 'Österreich' },
    { code: 'de-ch', name: 'Deutsch', country: 'Schweiz' },
    { code: 'de-lu', name: 'Deutsch', country: 'Luxemburg' },
    { code: 'et', name: 'Eesti', country: 'Eesti' },
    { code: 'en-au', name: 'English', country: 'Australia' },
    { code: 'en-gy', name: 'English', country: 'Guyana' },
    { code: 'en-ca', name: 'English', country: 'Canada' },
    { code: 'en-gb', name: 'English', country: 'United Kingdom' },
    { code: 'en-us', name: 'English', country: 'United States' },
    { code: 'es', name: 'Español', country: 'España' },
    { code: 'fr', name: 'Français', country: 'Canada' },
    { code: 'fr-fr', name: 'Français', country: 'France' },
    { code: 'it', name: 'Italiano', country: 'Italia' },
    { code: 'ja', name: '日本語', country: '日本' },
    { code: 'ko', name: '한국어', country: '대한민국' },
    { code: 'pt', name: 'Português', country: 'Brasil' },
    { code: 'ru', name: 'Русский', country: 'Россия' },
    { code: 'zh', name: '中文', country: '中国' },
  ];

  const currencies = [
    { name: 'Canadian dollar', code: 'CAD', symbol: '$' },
    { name: 'Australian dollar', code: 'AUD', symbol: '$' },
    { name: 'Brazilian real', code: 'BRL', symbol: 'R$' },
    { name: 'Bulgarian lev', code: 'BGN', symbol: 'лв.' },
    { name: 'Chilean peso', code: 'CLP', symbol: '$' },
    { name: 'Chinese yuan', code: 'CNY', symbol: '¥' },
    { name: 'Colombian peso', code: 'COP', symbol: '$' },
    { name: 'Costa Rican colon', code: 'CRC', symbol: '₡' },
    { name: 'Czech koruna', code: 'CZK', symbol: 'Kč' },
    { name: 'Danish krone', code: 'DKK', symbol: 'kr' },
    { name: 'Egyptian pound', code: 'EGP', symbol: 'ج.م' },
    { name: 'Emirati dirham', code: 'AED', symbol: 'د.إ' },
    { name: 'Euro', code: 'EUR', symbol: '€' },
    { name: 'Ghanaian cedi', code: 'GHS', symbol: 'GH¢' },
    { name: 'Hong Kong dollar', code: 'HKD', symbol: '$' },
    { name: 'Hungarian forint', code: 'HUF', symbol: 'Ft' },
    { name: 'Indian rupee', code: 'INR', symbol: '₹' },
    { name: 'Indonesian rupiah', code: 'IDR', symbol: 'Rp' },
    { name: 'Israeli new shekel', code: 'ILS', symbol: '₪' },
    { name: 'Japanese yen', code: 'JPY', symbol: '¥' },
    { name: 'Kazakhstani tenge', code: 'KZT', symbol: '₸' },
    { name: 'Kenyan shilling', code: 'KES', symbol: 'KSh' },
    { name: 'Malaysian ringgit', code: 'MYR', symbol: 'RM' },
    { name: 'Mexican peso', code: 'MXN', symbol: '$' },
    { name: 'Moroccan dirham', code: 'MAD', symbol: 'MAD' },
    { name: 'New Taiwan dollar', code: 'TWD', symbol: '$' },
    { name: 'New Zealand dollar', code: 'NZD', symbol: '$' },
    { name: 'Norwegian krone', code: 'NOK', symbol: 'kr' },
    { name: 'Peruvian sol', code: 'PEN', symbol: 'S/' },
    { name: 'Philippine peso', code: 'PHP', symbol: '₱' },
    { name: 'Polish zloty', code: 'PLN', symbol: 'zł' },
    { name: 'Pound sterling', code: 'GBP', symbol: '£' },
    { name: 'Qatari riyal', code: 'QAR', symbol: 'ر.ق' },
    { name: 'Romanian leu', code: 'RON', symbol: 'lei' },
    { name: 'Saudi Arabian riyal', code: 'SAR', symbol: 'SR' },
    { name: 'Singapore dollar', code: 'SGD', symbol: '$' },
    { name: 'South African rand', code: 'ZAR', symbol: 'R' },
    { name: 'South Korean won', code: 'KRW', symbol: '₩' },
    { name: 'Swedish krona', code: 'SEK', symbol: 'kr' },
    { name: 'Swiss franc', code: 'CHF', symbol: 'CHF' },
    { name: 'Thai baht', code: 'THB', symbol: '฿' },
    { name: 'Turkish lira', code: 'TRY', symbol: '₺' },
    { name: 'Ukrainian hryvnia', code: 'UAH', symbol: '₴' },
    { name: 'US dollar', code: 'USD', symbol: '$' },
    { name: 'Vietnamese dong', code: 'VND', symbol: '₫' },
  ];

  const suggestedDestinations = [
    {
      id: 1,
      name: 'Nearby',
      description: 'Find what\'s around you',
      icon: '📍',
      color: 'blue'
    },
    {
      id: 2,
      name: 'Calgary, Alberta',
      description: 'For nature-lovers',
      icon: '🏔️',
      color: 'orange'
    },
    {
      id: 3,
      name: 'Victoria, British Columbia',
      description: 'For sights like The Butchart Gardens',
      icon: '🌊',
      color: 'brown'
    },
    {
      id: 4,
      name: 'Kelowna, British Columbia',
      description: 'Popular lake destination',
      icon: '🏞️',
      color: 'brown'
    },
    {
      id: 5,
      name: 'Edmonton, Alberta',
      description: 'For sights like West Edmonton Mall',
      icon: '🏢',
      color: 'blue'
    },
    {
      id: 6,
      name: 'Whistler, British Columbia',
      description: 'Great for a weekend getaway',
      icon: '🏔️',
      color: 'brown'
    },
    {
      id: 7,
      name: 'Toronto, Ontario',
      description: 'For its bustling nightlife',
      icon: '🌃',
      color: 'blue'
    }
  ];

  const flexibleOptions = [
    'Exact dates',
    '± 1 day',
    '± 2 days',
    '± 3 days',
    '± 7 days',
    '± 14 days'
  ];

  const durationOptions = [
    'Weekend',
    'Week',
    'Month'
  ];

  // Generate months for flexible tab
  const generateFlexibleMonths = () => {
    const months = [];
    const currentDate = new Date();
    
    for (let i = 0; i < 12; i++) {
      const monthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 1);
      months.push(monthDate);
    }
    
    return months;
  };

  const flexibleMonths = generateFlexibleMonths();

  // Calendar utility functions
  const getDaysInMonth = (date: Date) => {
    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
  };

  const getFirstDayOfMonth = (date: Date) => {
    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric' 
    });
  };

  const isDateSelected = (date: Date) => {
    if (!selectedDates.checkIn && !selectedDates.checkOut) return false;
    if (selectedDates.checkIn && selectedDates.checkOut) {
      return date >= selectedDates.checkIn && date <= selectedDates.checkOut;
    }
    if (selectedDates.checkIn) {
      return date.getTime() === selectedDates.checkIn.getTime();
    }
    return false;
  };

  const isDateInRange = (date: Date) => {
    if (!selectedDates.checkIn || !selectedDates.checkOut) return false;
    return date > selectedDates.checkIn && date < selectedDates.checkOut;
  };

  const handleDateClick = (date: Date) => {
    if (!selectedDates.checkIn || (selectedDates.checkIn && selectedDates.checkOut)) {
      // Start new selection
      setSelectedDates({ checkIn: date, checkOut: null });
      setCheckInValue(formatDate(date));
      setCheckOutValue('');
    } else if (selectedDates.checkIn && !selectedDates.checkOut) {
      // Complete selection
      if (date > selectedDates.checkIn) {
        setSelectedDates({ ...selectedDates, checkOut: date });
        setCheckOutValue(formatDate(date));
        setIsCheckInDropdownOpen(false);
        setIsCheckOutDropdownOpen(false);
      } else {
        // If clicked date is before check-in, make it the new check-in
        setSelectedDates({ checkIn: date, checkOut: null });
        setCheckInValue(formatDate(date));
        setCheckOutValue('');
      }
    }
  };

  // Circular month selector functions
  const handleCircleClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (!circleRef.current) return;
    
    const rect = circleRef.current.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    const mouseX = event.clientX - centerX;
    const mouseY = event.clientY - centerY;
    
    // Calculate angle from top (0 degrees)
    let angle = Math.atan2(mouseY, mouseX) * (180 / Math.PI);
    angle = (angle + 90 + 360) % 360; // Adjust to start from top
    
    // Convert angle to months (0-12 months)
    const months = Math.round((angle / 360) * 12);
    const clampedMonths = Math.max(1, Math.min(12, months));
    
    setSelectedMonths(clampedMonths);
  };

  const handleCircleMouseDown = () => {
    setIsDragging(true);
  };

  const handleCircleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {
    if (!isDragging) return;
    handleCircleClick(event);
  };

  const handleCircleMouseUp = () => {
    setIsDragging(false);
  };

  // Calculate date range based on selected months
  const getDateRangeFromMonths = () => {
    const startDate = new Date();
    const endDate = new Date();
    endDate.setMonth(startDate.getMonth() + selectedMonths);
    
    return {
      start: startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
      end: endDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
    };
  };

  const properties = [
    {
      id: 1,
      image: '/images/serai-images/quebec2.jpg',
      type: 'Home in Laval',
      location: 'Laval, Quebec',
      dates: 'Oct 31-Nov 2',
      price: '$136 CAD for 2 nights',
      rating: 4.84,
      isGuestFavorite: true
    },
    {
      id: 2,
      image: '/images/serai-images/quebec2.jpg',
      type: 'Room in Oka',
      location: 'Oka, Quebec',
      dates: 'Sep 19-21',
      price: '$89 CAD for 2 nights',
      rating: 5.0,
      isGuestFavorite: true
    },
    {
      id: 3,
      image: '/images/serai-images/quebec2.jpg',
      type: 'Chalet in La Conception',
      location: 'La Conception, Quebec',
      dates: 'Nov 15-17',
      price: '$245 CAD for 2 nights',
      rating: 4.92,
      isGuestFavorite: true
    },
    {
      id: 4,
      image: '/images/serai-images/quebec2.jpg',
      type: 'Home in Montreal',
      location: 'Montreal, Quebec',
      dates: 'Dec 1-3',
      price: '$178 CAD for 2 nights',
      rating: 4.76,
      isGuestFavorite: false
    },
    {
      id: 5,
      image: '/images/serai-images/quebec2.jpg',
      type: 'Condo in Montreal',
      location: 'Montreal, Quebec',
      dates: 'Jan 10-12',
      price: '$156 CAD for 2 nights',
      rating: 4.88,
      isGuestFavorite: true
    },
    {
      id: 6,
      image: '/images/serai-images/quebec2.jpg',
      type: 'Cottage in Charlevoix',
      location: 'Charlevoix, Quebec',
      dates: 'Feb 5-7',
      price: '$198 CAD for 2 nights',
      rating: 4.95,
      isGuestFavorite: true
    },
    {
      id: 7,
      image: '/images/serai-images/quebec2.jpg',
      type: 'Apartment in Gatineau',
      location: 'Gatineau, Quebec',
      dates: 'Mar 12-14',
      price: '$124 CAD for 2 nights',
      rating: 4.67,
      isGuestFavorite: false
    }
  ];

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="flex items-center justify-between p-4">
        <div className="flex items-center space-x-4">
          <Link href="/" className="flex items-center space-x-2">
            <ArrowLeft className="h-5 w-5 text-gray-600" />
            <span className="text-gray-600">Back</span>
          </Link>
        </div>
        
        {/* Center Logo */}
        <div className="absolute left-1/2 transform -translate-x-1/2">
          <Link href="/tabs">
            <Image
              src="/images/serai-images/serai-name-black.png"
              alt="SERAI"
              width={600}
              height={180}
              className="h-28 w-auto"
              priority
            />
          </Link>
        </div>
        
        <div className="flex items-center space-x-4">
          <button 
            onClick={() => setIsListingModalOpen(true)}
            className="text-gray-600 hover:text-gray-800"
          >
            List with SERAI
          </button>
          <button 
            onClick={() => setIsLanguageModalOpen(true)}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <Globe className="h-5 w-5 text-gray-600" />
          </button>
          <div className="relative" ref={menuRef}>
            <button 
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="p-2 hover:bg-gray-100 rounded-full flex items-center space-x-1"
            >
              <Menu className="h-5 w-5 text-gray-600" />
              <ChevronDown className={`h-4 w-4 text-gray-600 transition-transform ${isMenuOpen ? 'rotate-180' : ''}`} />
            </button>
            
            {/* Dropdown Menu */}
            {isMenuOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                  Profile
                </a>
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                  Memberships
                </a>
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                  Gift cards
                </a>
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                  Refer a friend
                </a>
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                  SERAI Partners
                </a>
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                  Help Centre
                </a>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Language Modal */}
      {isLanguageModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div 
            ref={languageModalRef}
            className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[80vh] overflow-hidden"
          >
            {/* Modal Header */}
            <div className="flex items-center justify-between p-6">
              <div className="flex space-x-6">
                <button 
                  onClick={() => setActiveTab('language')}
                  className={`text-lg font-semibold pb-2 ${
                    activeTab === 'language' 
                      ? 'text-gray-900 border-b-2 border-gray-900' 
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                >
                  Language and region
                </button>
                <button 
                  onClick={() => setActiveTab('currency')}
                  className={`text-lg font-semibold pb-2 ${
                    activeTab === 'currency' 
                      ? 'text-gray-900 border-b-2 border-gray-900' 
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                >
                  Currency
                </button>
              </div>
              <button 
                onClick={() => setIsLanguageModalOpen(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-6 max-h-[60vh] overflow-y-auto">
              {activeTab === 'language' ? (
                <>
                  {/* Translation Section */}
                  <div className="mb-8">
                    <div className="flex items-center space-x-3 mb-2">
                      <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center">
                        <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <h3 className="text-lg font-semibold text-gray-900">Translation</h3>
                    </div>
                    <p className="text-sm text-gray-600 mb-4">
                      Automatically translate descriptions and reviews to English.
                    </p>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-700">Enable translation</span>
                      <button
                        onClick={() => setIsTranslationEnabled(!isTranslationEnabled)}
                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                          isTranslationEnabled ? 'bg-gray-900' : 'bg-gray-200'
                        }`}
                      >
                        <span
                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                            isTranslationEnabled ? 'translate-x-6' : 'translate-x-1'
                          }`}
                        />
                      </button>
                    </div>
                  </div>

                  {/* Suggested Languages */}
                  <div className="mb-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Suggested languages and regions</h3>
                    <div className="grid grid-cols-3 gap-4">
                      <button 
                        onClick={() => setSelectedLanguage('English (United States)')}
                        className={`p-4 border rounded-lg text-left hover:bg-gray-50 ${
                          selectedLanguage === 'English (United States)' ? 'border-gray-900' : 'border-gray-200'
                        }`}
                      >
                        <div className="font-medium text-gray-900">English</div>
                        <div className="text-sm text-gray-600">United States</div>
                      </button>
                      <button 
                        onClick={() => setSelectedLanguage('English (United Kingdom)')}
                        className={`p-4 border rounded-lg text-left hover:bg-gray-50 ${
                          selectedLanguage === 'English (United Kingdom)' ? 'border-gray-900' : 'border-gray-200'
                        }`}
                      >
                        <div className="font-medium text-gray-900">English</div>
                        <div className="text-sm text-gray-600">United Kingdom</div>
                      </button>
                      <button 
                        onClick={() => setSelectedLanguage('Français (Canada)')}
                        className={`p-4 border rounded-lg text-left hover:bg-gray-50 ${
                          selectedLanguage === 'Français (Canada)' ? 'border-gray-900' : 'border-gray-200'
                        }`}
                      >
                        <div className="font-medium text-gray-900">Français</div>
                        <div className="text-sm text-gray-600">Canada</div>
                      </button>
                    </div>
                  </div>

                  {/* All Languages */}
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Choose a language and region</h3>
                    <div className="grid grid-cols-2 gap-3">
                      {languages.map((lang) => (
                        <button
                          key={lang.code}
                          onClick={() => setSelectedLanguage(`${lang.name} (${lang.country})`)}
                          className={`p-3 border rounded-lg text-left hover:bg-gray-50 ${
                            selectedLanguage === `${lang.name} (${lang.country})` ? 'border-gray-900' : 'border-gray-200'
                          }`}
                        >
                          <div className="font-medium text-gray-900">{lang.name}</div>
                          <div className="text-sm text-gray-600">{lang.country}</div>
                        </button>
                      ))}
                    </div>
                  </div>
                </>
              ) : (
                /* Currency Tab */
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Choose a currency</h3>
                  <div className="grid grid-cols-5 gap-3">
                    {currencies.map((currency) => (
                      <button
                        key={currency.code}
                        onClick={() => setSelectedCurrency(`${currency.name} (${currency.code} - ${currency.symbol})`)}
                        className={`w-20 h-20 border rounded-full flex flex-col items-center justify-center hover:bg-gray-50 ${
                          selectedCurrency === `${currency.name} (${currency.code} - ${currency.symbol})` 
                            ? 'border-gray-900 bg-gray-50' 
                            : 'border-gray-200'
                        }`}
                      >
                        <div className="font-medium text-gray-900 text-[10px] text-center leading-tight px-1">{currency.name}</div>
                        <div className="text-[9px] text-gray-600 mt-0.5">{currency.code} - {currency.symbol}</div>
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Navigation Tabs */}
      <div>
        <div className="max-w-7xl mx-auto px-4">
          <nav className="flex space-x-8 justify-center">
            <button
              onClick={() => setActiveNavTab('silk-route')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeNavTab === 'silk-route'
                  ? 'border-gray-900 text-gray-900'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Silk Routes
            </button>
            <button
              onClick={() => setActiveNavTab('homes')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeNavTab === 'homes'
                  ? 'border-gray-900 text-gray-900'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Serais
            </button>
            <button
              onClick={() => setActiveNavTab('experiences')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeNavTab === 'experiences'
                  ? 'border-gray-900 text-gray-900'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Bazaar
            </button>
            <button
              onClick={() => setActiveNavTab('services')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeNavTab === 'services'
                  ? 'border-gray-900 text-gray-900'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Essentials
            </button>
          </nav>
        </div>
      </div>

      {/* Search Bar */}
      <div className="bg-white py-4">
        <div className="max-w-7xl mx-auto px-4">
          {renderSearchBar()}
        </div>
      </div>

      {/* Main Content - Tabbed Interface */}
      <main className="max-w-7xl mx-auto px-4 py-8">
              <input
                type="text"
                placeholder="Add dates"
                value={checkInValue}
                onChange={(e) => setCheckInValue(e.target.value)}
                onFocus={() => {
                  setIsCheckInDropdownOpen(true);
                  setIsCheckOutDropdownOpen(false);
                }}
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
                
                {/* Calendar Dropdown */}
                {isCheckInDropdownOpen && (
                  <div className="absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-50 w-96">
                    <div className="p-4">
                      {/* Tabs */}
                      <div className="flex space-x-6 mb-6">
                        <button 
                          onClick={() => setActiveCalendarTab('dates')}
                          className={`text-lg font-semibold pb-2 ${
                            activeCalendarTab === 'dates'
                              ? 'text-gray-900 border-b-2 border-gray-900'
                              : 'text-gray-500 hover:text-gray-700'
                          }`}
                        >
                          Dates
                        </button>
                        <button 
                          onClick={() => setActiveCalendarTab('months')}
                          className={`text-lg font-semibold pb-2 ${
                            activeCalendarTab === 'months'
                              ? 'text-gray-900 border-b-2 border-gray-900'
                              : 'text-gray-500 hover:text-gray-700'
                          }`}
                        >
                          Months
                        </button>
                        <button 
                          onClick={() => setActiveCalendarTab('flexible')}
                          className={`text-lg font-semibold pb-2 ${
                            activeCalendarTab === 'flexible'
                              ? 'text-gray-900 border-b-2 border-gray-900'
                              : 'text-gray-500 hover:text-gray-700'
                          }`}
                        >
                          Flexible
                        </button>
                      </div>

                      {/* Content based on active tab */}
                      {activeCalendarTab === 'dates' && (
                        <>
                          {/* Calendar */}
                          <div className="mb-6">
                            {/* Month Navigation */}
                            <div className="flex items-center justify-between mb-4">
                              <button
                                onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1))}
                                className="p-2 hover:bg-gray-100 rounded-full"
                              >
                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                                </svg>
                              </button>
                              <h3 className="text-lg font-semibold text-gray-900">
                                {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                              </h3>
                              <button
                                onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1))}
                                className="p-2 hover:bg-gray-100 rounded-full"
                              >
                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                </svg>
                              </button>
                            </div>

                            {/* Calendar Grid */}
                            <div className="grid grid-cols-7 gap-1 mb-2">
                              {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day) => (
                                <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
                                  {day}
                                </div>
                              ))}
                            </div>

                            <div className="grid grid-cols-7 gap-1">
                              {Array.from({ length: getFirstDayOfMonth(currentMonth) }, (_, i) => (
                                <div key={`empty-${i}`} className="h-10"></div>
                              ))}
                              {Array.from({ length: getDaysInMonth(currentMonth) }, (_, i) => {
                                const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i + 1);
                                const today = new Date();
                                const isPast = date < today;
                                const isSelected = isDateSelected(date);
                                const isInRange = isDateInRange(date);
                                
                                return (
                                  <button
                                    key={i + 1}
                                    onClick={() => !isPast && handleDateClick(date)}
                                    disabled={isPast}
                                    className={`h-10 w-10 rounded-full text-sm font-medium transition-colors ${
                                      isPast
                                        ? 'text-gray-300 cursor-not-allowed'
                                        : isSelected
                                        ? 'bg-gray-900 text-white'
                                        : isInRange
                                        ? 'bg-gray-100 text-gray-900'
                                        : 'text-gray-900 hover:bg-gray-100'
                                    }`}
                                  >
                                    {i + 1}
                                  </button>
                                );
                              })}
                            </div>
                          </div>
                        </>
                      )}

                      {activeCalendarTab === 'months' && (
                        <>
                          {/* Months Tab Content */}
                          <div className="text-center mb-8">
                            <h2 className="text-2xl font-bold text-gray-900 mb-8">When's your trip?</h2>
                            
                            {/* Circular Month Selector */}
                            <div className="flex justify-center mb-8">
                              <div 
                                ref={circleRef}
                                className="relative w-64 h-64 cursor-pointer"
                                onClick={handleCircleClick}
                                onMouseDown={handleCircleMouseDown}
                                onMouseMove={handleCircleMouseMove}
                                onMouseUp={handleCircleMouseUp}
                                onMouseLeave={handleCircleMouseUp}
                              >
                                {/* Outer gradient ring */}
                                <div className="absolute inset-0 rounded-full bg-gradient-to-r from-gray-200 via-pink-300 to-red-400"></div>
                                
                                {/* Inner white circle */}
                                <div className="absolute inset-4 rounded-full bg-white flex items-center justify-center">
                                  <div className="text-center">
                                    <div className="text-4xl font-bold text-gray-900">{selectedMonths}</div>
                                    <div className="text-lg text-gray-600">months</div>
                                  </div>
                                </div>
                                
                                {/* Dots around the circle */}
                                {Array.from({ length: 12 }, (_, i) => {
                                  const angle = (i * 30) - 90; // Start from top
                                  const x = 50 + 40 * Math.cos(angle * Math.PI / 180);
                                  const y = 50 + 40 * Math.sin(angle * Math.PI / 180);
                                  
                                  return (
                                    <div
                                      key={i}
                                      className="absolute w-2 h-2 bg-gray-600 rounded-full transform -translate-x-1/2 -translate-y-1/2"
                                      style={{
                                        left: `${x}%`,
                                        top: `${y}%`
                                      }}
                                    />
                                  );
                                })}
                                
                                {/* Handle */}
                                <div 
                                  className="absolute w-6 h-6 bg-white rounded-full shadow-lg transform -translate-x-1/2 -translate-y-1/2 border-2 border-gray-300"
                                  style={{
                                    left: `${50 + 40 * Math.cos((selectedMonths * 30 - 90) * Math.PI / 180)}%`,
                                    top: `${50 + 40 * Math.sin((selectedMonths * 30 - 90) * Math.PI / 180)}%`
                                  }}
                                />
                              </div>
                            </div>
                            
                            {/* Date Range Display */}
                            <div className="text-lg text-gray-900">
                              {getDateRangeFromMonths().start} to {getDateRangeFromMonths().end}
                            </div>
                          </div>
                        </>
                      )}

                      {activeCalendarTab === 'flexible' && (
                        <>
                          {/* Flexible Tab Content */}
                          <div className="space-y-8">
                            {/* How long would you like to stay? */}
                            <div>
                              <h3 className="text-lg font-semibold text-gray-900 mb-4">How long would you like to stay?</h3>
                              <div className="flex gap-3">
                                {durationOptions.map((duration) => (
                                  <button
                                    key={duration}
                                    onClick={() => setSelectedDuration(duration)}
                                    className={`px-6 py-3 rounded-full text-sm font-medium transition-colors border ${
                                      selectedDuration === duration
                                        ? 'bg-gray-900 text-white border-gray-900'
                                        : 'bg-white text-gray-700 border-gray-300 hover:border-gray-400'
                                    }`}
                                  >
                                    {duration}
                                  </button>
                                ))}
                              </div>
                            </div>

                            {/* When do you want to go? */}
                            <div>
                              <h3 className="text-lg font-semibold text-gray-900 mb-4">When do you want to go?</h3>
                              <div className="relative">
                                <div 
                                  ref={monthScrollRef}
                                  className="flex gap-3 overflow-x-auto scrollbar-hide pb-2"
                                  style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
                                >
                                  {flexibleMonths.map((month, index) => (
                                    <button
                                      key={index}
                                      onClick={() => setSelectedFlexibleMonth(month)}
                                      className={`flex-shrink-0 w-24 h-20 rounded-lg border-2 flex flex-col items-center justify-center transition-colors ${
                                        selectedFlexibleMonth.getTime() === month.getTime()
                                          ? 'border-gray-900 bg-gray-50'
                                          : 'border-gray-200 hover:border-gray-300'
                                      }`}
                                    >
                                      {/* Calendar Icon */}
                                      <div className="w-6 h-6 mb-1">
                                        <svg className="w-full h-full text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                      </div>
                                      <div className="text-xs font-medium text-gray-900 text-center">
                                        {month.toLocaleDateString('en-US', { month: 'short' })}
                                      </div>
                                      <div className="text-xs text-gray-600">
                                        {month.getFullYear()}
                                      </div>
                                    </button>
                                  ))}
                                </div>
                                
                                {/* Scroll arrows */}
                                <button
                                  onClick={() => {
                                    if (monthScrollRef.current) {
                                      monthScrollRef.current.scrollBy({ left: -200, behavior: 'smooth' });
                                    }
                                  }}
                                  className="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-2 w-8 h-8 bg-white rounded-full shadow-lg border border-gray-200 flex items-center justify-center hover:bg-gray-50"
                                >
                                  <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                                  </svg>
                                </button>
                                
                                <button
                                  onClick={() => {
                                    if (monthScrollRef.current) {
                                      monthScrollRef.current.scrollBy({ left: 200, behavior: 'smooth' });
                                    }
                                  }}
                                  className="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-2 w-8 h-8 bg-white rounded-full shadow-lg border border-gray-200 flex items-center justify-center hover:bg-gray-50"
                                >
                                  <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                  </svg>
                                </button>
                              </div>
                            </div>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                )}
            </div>
            
            {/* Check Out Field */}
            <div className="flex-1 px-6 py-3 border-r border-gray-300 relative" ref={checkOutDropdownRef}>
              <label className="block text-xs font-semibold text-gray-900 mb-1">Check out</label>
              <input
                type="text"
                placeholder="Add dates"
                value={checkOutValue}
                onChange={(e) => setCheckOutValue(e.target.value)}
                onFocus={() => {
                  setIsCheckOutDropdownOpen(true);
                  setIsCheckInDropdownOpen(false);
                }}
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
                />
                
                {/* Calendar Dropdown for Check Out */}
                {isCheckOutDropdownOpen && (
                  <div className="absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-50 w-96">
                    <div className="p-4">
                      {/* Tabs */}
                      <div className="flex space-x-6 mb-6">
                        <button 
                          onClick={() => setActiveCalendarTab('dates')}
                          className={`text-lg font-semibold pb-2 ${
                            activeCalendarTab === 'dates'
                              ? 'text-gray-900 border-b-2 border-gray-900'
                              : 'text-gray-500 hover:text-gray-700'
                          }`}
                        >
                          Dates
                        </button>
                        <button 
                          onClick={() => setActiveCalendarTab('months')}
                          className={`text-lg font-semibold pb-2 ${
                            activeCalendarTab === 'months'
                              ? 'text-gray-900 border-b-2 border-gray-900'
                              : 'text-gray-500 hover:text-gray-700'
                          }`}
                        >
                          Months
                        </button>
                        <button 
                          onClick={() => setActiveCalendarTab('flexible')}
                          className={`text-lg font-semibold pb-2 ${
                            activeCalendarTab === 'flexible'
                              ? 'text-gray-900 border-b-2 border-gray-900'
                              : 'text-gray-500 hover:text-gray-700'
                          }`}
                        >
                          Flexible
                        </button>
                      </div>

                      {/* Content based on active tab */}
                      {activeCalendarTab === 'dates' && (
                        <>
                          {/* Calendar */}
                          <div className="mb-6">
                            {/* Month Navigation */}
                            <div className="flex items-center justify-between mb-4">
                              <button
                                onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1))}
                                className="p-2 hover:bg-gray-100 rounded-full"
                              >
                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                                </svg>
                              </button>
                              <h3 className="text-lg font-semibold text-gray-900">
                                {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                              </h3>
                              <button
                                onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1))}
                                className="p-2 hover:bg-gray-100 rounded-full"
                              >
                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                </svg>
                              </button>
                            </div>

                            {/* Calendar Grid */}
                            <div className="grid grid-cols-7 gap-1 mb-2">
                              {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day) => (
                                <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
                                  {day}
                                </div>
                              ))}
                            </div>

                            <div className="grid grid-cols-7 gap-1">
                              {Array.from({ length: getFirstDayOfMonth(currentMonth) }, (_, i) => (
                                <div key={`empty-${i}`} className="h-10"></div>
                              ))}
                              {Array.from({ length: getDaysInMonth(currentMonth) }, (_, i) => {
                                const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i + 1);
                                const today = new Date();
                                const isPast = date < today;
                                const isSelected = isDateSelected(date);
                                const isInRange = isDateInRange(date);
                                
                                return (
                                  <button
                                    key={i + 1}
                                    onClick={() => !isPast && handleDateClick(date)}
                                    disabled={isPast}
                                    className={`h-10 w-10 rounded-full text-sm font-medium transition-colors ${
                                      isPast
                                        ? 'text-gray-300 cursor-not-allowed'
                                        : isSelected
                                        ? 'bg-gray-900 text-white'
                                        : isInRange
                                        ? 'bg-gray-100 text-gray-900'
                                        : 'text-gray-900 hover:bg-gray-100'
                                    }`}
                                  >
                                    {i + 1}
                                  </button>
                                );
                              })}
                            </div>
                          </div>
                        </>
                      )}

                      {activeCalendarTab === 'months' && (
                        <>
                          {/* Months Tab Content */}
                          <div className="text-center mb-8">
                            <h2 className="text-2xl font-bold text-gray-900 mb-8">When's your trip?</h2>
                            
                            {/* Circular Month Selector */}
                            <div className="flex justify-center mb-8">
                              <div 
                                ref={circleRef}
                                className="relative w-64 h-64 cursor-pointer"
                                onClick={handleCircleClick}
                                onMouseDown={handleCircleMouseDown}
                                onMouseMove={handleCircleMouseMove}
                                onMouseUp={handleCircleMouseUp}
                                onMouseLeave={handleCircleMouseUp}
                              >
                                {/* Outer gradient ring */}
                                <div className="absolute inset-0 rounded-full bg-gradient-to-r from-gray-200 via-pink-300 to-red-400"></div>
                                
                                {/* Inner white circle */}
                                <div className="absolute inset-4 rounded-full bg-white flex items-center justify-center">
                                  <div className="text-center">
                                    <div className="text-4xl font-bold text-gray-900">{selectedMonths}</div>
                                    <div className="text-lg text-gray-600">months</div>
                                  </div>
                                </div>
                                
                                {/* Dots around the circle */}
                                {Array.from({ length: 12 }, (_, i) => {
                                  const angle = (i * 30) - 90; // Start from top
                                  const x = 50 + 40 * Math.cos(angle * Math.PI / 180);
                                  const y = 50 + 40 * Math.sin(angle * Math.PI / 180);
                                  
                                  return (
                                    <div
                                      key={i}
                                      className="absolute w-2 h-2 bg-gray-600 rounded-full transform -translate-x-1/2 -translate-y-1/2"
                                      style={{
                                        left: `${x}%`,
                                        top: `${y}%`
                                      }}
                                    />
                                  );
                                })}
                                
                                {/* Handle */}
                                <div 
                                  className="absolute w-6 h-6 bg-white rounded-full shadow-lg transform -translate-x-1/2 -translate-y-1/2 border-2 border-gray-300"
                                  style={{
                                    left: `${50 + 40 * Math.cos((selectedMonths * 30 - 90) * Math.PI / 180)}%`,
                                    top: `${50 + 40 * Math.sin((selectedMonths * 30 - 90) * Math.PI / 180)}%`
                                  }}
                                />
                              </div>
                            </div>
                            
                            {/* Date Range Display */}
                            <div className="text-lg text-gray-900">
                              {getDateRangeFromMonths().start} to {getDateRangeFromMonths().end}
                            </div>
                          </div>
                        </>
                      )}

                      {activeCalendarTab === 'flexible' && (
                        <>
                          {/* Flexible Tab Content */}
                          <div className="space-y-8">
                            {/* How long would you like to stay? */}
                            <div>
                              <h3 className="text-lg font-semibold text-gray-900 mb-4">How long would you like to stay?</h3>
                              <div className="flex gap-3">
                                {durationOptions.map((duration) => (
                                  <button
                                    key={duration}
                                    onClick={() => setSelectedDuration(duration)}
                                    className={`px-6 py-3 rounded-full text-sm font-medium transition-colors border ${
                                      selectedDuration === duration
                                        ? 'bg-gray-900 text-white border-gray-900'
                                        : 'bg-white text-gray-700 border-gray-300 hover:border-gray-400'
                                    }`}
                                  >
                                    {duration}
                                  </button>
                                ))}
                              </div>
                            </div>

                            {/* When do you want to go? */}
                            <div>
                              <h3 className="text-lg font-semibold text-gray-900 mb-4">When do you want to go?</h3>
                              <div className="relative">
                                <div 
                                  ref={monthScrollRef}
                                  className="flex gap-3 overflow-x-auto scrollbar-hide pb-2"
                                  style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
                                >
                                  {flexibleMonths.map((month, index) => (
                                    <button
                                      key={index}
                                      onClick={() => setSelectedFlexibleMonth(month)}
                                      className={`flex-shrink-0 w-24 h-20 rounded-lg border-2 flex flex-col items-center justify-center transition-colors ${
                                        selectedFlexibleMonth.getTime() === month.getTime()
                                          ? 'border-gray-900 bg-gray-50'
                                          : 'border-gray-200 hover:border-gray-300'
                                      }`}
                                    >
                                      {/* Calendar Icon */}
                                      <div className="w-6 h-6 mb-1">
                                        <svg className="w-full h-full text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                      </div>
                                      <div className="text-xs font-medium text-gray-900 text-center">
                                        {month.toLocaleDateString('en-US', { month: 'short' })}
                                      </div>
                                      <div className="text-xs text-gray-600">
                                        {month.getFullYear()}
                                      </div>
                                    </button>
                                  ))}
                                </div>
                                
                                {/* Scroll arrows */}
                                <button
                                  onClick={() => {
                                    if (monthScrollRef.current) {
                                      monthScrollRef.current.scrollBy({ left: -200, behavior: 'smooth' });
                                    }
                                  }}
                                  className="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-2 w-8 h-8 bg-white rounded-full shadow-lg border border-gray-200 flex items-center justify-center hover:bg-gray-50"
                                >
                                  <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                                  </svg>
                                </button>
                                
                                <button
                                  onClick={() => {
                                    if (monthScrollRef.current) {
                                      monthScrollRef.current.scrollBy({ left: 200, behavior: 'smooth' });
                                    }
                                  }}
                                  className="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-2 w-8 h-8 bg-white rounded-full shadow-lg border border-gray-200 flex items-center justify-center hover:bg-gray-50"
                                >
                                  <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                  </svg>
                                </button>
                              </div>
                            </div>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                )}
            </div>
            
            {/* Who Field */}
            <div className="flex-1 px-6 py-3">
              <label className="block text-xs font-semibold text-gray-900 mb-1">Who</label>
              <input
                type="text"
                placeholder="Add guests"
                className="w-full text-sm text-gray-900 placeholder-gray-500 focus:outline-none bg-transparent"
              />
            </div>
            
            {/* Search Button */}
            <button className="p-2 m-2 bg-gradient-to-r from-red-800 to-red-900 text-white rounded-full hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      {/* Main Content - Tabbed Interface */}
      <main className="max-w-7xl mx-auto px-4 py-8">
        {activeNavTab === 'silk-route' && (
          <div>
            <h2 className="text-2xl font-semibold text-gray-900 mb-6">Silk Routes - Trip Planning</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Golden Triangle Circuit */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1524492412937-b28074a5d7da?w=800"
                    alt="Golden Triangle route"
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-sm font-semibold">
                    7 days
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Golden Triangle Circuit</h3>
                  <p className="text-sm text-gray-600 mb-3">Explore Delhi, Agra, and Jaipur with luxury accommodations.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>2-12 travelers</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$2,500/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Plan Trip
                    </button>
                  </div>
                </div>
              </div>

              {/* Himalayan Adventure Trail */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800"
                    alt="Himalayan trek"
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-sm font-semibold">
                    10 days
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Himalayan Adventure Trail</h3>
                  <p className="text-sm text-gray-600 mb-3">Trek through the majestic Himalayas with breathtaking views.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>2-8 travelers</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$1,800/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Plan Trip
                    </button>
                  </div>
                </div>
              </div>

              {/* Cultural Heritage Walk */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800"
                    alt="Rajasthan heritage"
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-sm font-semibold">
                    5 days
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Cultural Heritage Walk</h3>
                  <p className="text-sm text-gray-600 mb-3">Discover the rich cultural heritage of Rajasthan.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>1-15 travelers</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$1,200/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Plan Trip
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeNavTab === 'homes' && (
          <div>
            <h2 className="text-2xl font-semibold text-gray-900 mb-6">Serais - Boutique Hotels</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Urban Loft Toronto */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800"
                    alt="Urban loft Toronto"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-sm font-semibold">
                    $199/CAD
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Urban Loft Toronto</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.6</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Modern loft in downtown Toronto with industrial design.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>2 guests • 1 bed • 1 bath</span>
                    </div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      View Details
                    </button>
                  </div>
                </div>
              </div>

              {/* Mountain View Chalet */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=800"
                    alt="Mountain chalet"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-sm font-semibold">
                    $450/CAD
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Mountain View Chalet</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.9</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Cozy chalet with breathtaking mountain views.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>6 guests • 3 bed • 2 bath</span>
                    </div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      View Details
                    </button>
                  </div>
                </div>
              </div>

              {/* Serai Boutique Hotel Montreal */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800"
                    alt="Boutique hotel Montreal"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-sm font-semibold">
                    $299/CAD
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Serai Boutique Hotel Montreal</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.8</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Luxurious boutique hotel in the heart of Montreal.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>4 guests • 2 bed • 2 bath</span>
                    </div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      View Details
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeNavTab === 'experiences' && (
          <div>
            <h2 className="text-2xl font-semibold text-gray-900 mb-6">Bazaar - Experiences</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Traditional Pottery Workshop */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800"
                    alt="Pottery workshop"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    3h
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Traditional Pottery Workshop</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.8</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Learn the ancient art of pottery making with local artisans.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>2-8 guests</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$75/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Book Experience
                    </button>
                  </div>
                </div>
              </div>

              {/* Mountain Photography Walk */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800"
                    alt="Mountain photography"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    4h
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Mountain Photography Walk</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.9</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Capture stunning mountain landscapes with professional guidance.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>1-6 guests</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$120/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Book Experience
                    </button>
                  </div>
                </div>
              </div>

              {/* Culinary Food Walk */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=800"
                    alt="Food walk"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    2.5h
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Culinary Food Walk</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.7</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Explore local food culture through guided tastings.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>2-10 guests</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$65/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Book Experience
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeNavTab === 'services' && (
          <div>
            <h2 className="text-2xl font-semibold text-gray-900 mb-6">Essentials - Services</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Ayurvedic Massage Therapy */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1540555700478-4be289fbecef?w=800"
                    alt="Ayurvedic massage"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    1.5h
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Ayurvedic Massage Therapy</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.9</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Professional Ayurvedic massage therapy at your location.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>Montreal, Laval, Westmount</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$120/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Book Service
                    </button>
                  </div>
                </div>
              </div>

              {/* Private Chef Experience */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=800"
                    alt="Private chef"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    3h
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Private Chef Experience</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.8</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Personal chef service for intimate dinners or special occasions.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>Toronto, Mississauga, Markham</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$200/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Book Service
                    </button>
                  </div>
                </div>
              </div>

              {/* Professional Photography Session */}
              <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
                <div className="relative h-48 bg-gray-200">
                  <img
                    src="https://images.unsplash.com/photo-1606983340126-99ab4feaa64a?w=800"
                    alt="Photography session"
                    className="w-full h-full object-cover"
                  />
                  <button className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:bg-gray-50">
                    <Heart className="h-4 w-4 text-gray-600" />
                  </button>
                  <div className="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    2h
                  </div>
                </div>
                <div className="p-4 flex flex-col flex-grow">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">Professional Photography Session</h3>
                    <div className="flex items-center space-x-1">
                      <Star className="h-4 w-4 text-yellow-400 fill-current" />
                      <span className="text-sm text-gray-600">4.9</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">Candid and professional photography for couples, families.</p>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center text-sm text-gray-600">
                      <span>Vancouver, Richmond, Burnaby</span>
                    </div>
                    <div className="text-lg font-semibold text-gray-900">$150/CAD</div>
                  </div>
                  <div className="mt-auto">
                    <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white text-center py-2 px-4 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
                      Book Service
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Listing Modal */}
      {isListingModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div 
            ref={listingModalRef}
            className="bg-white rounded-2xl p-8 max-w-md w-full mx-4"
          >
            {/* Header */}
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-semibold text-gray-900">What would you like to list?</h2>
              <button
                onClick={() => setIsListingModalOpen(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Options */}
            <div className="grid grid-cols-1 gap-4 mb-8">
              {/* Home */}
              <button className="p-6 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-md transition-all duration-200 text-left">
                <div className="flex flex-col items-center">
                  <div className="w-16 h-16 mb-4 flex items-center justify-center">
                    <svg className="w-12 h-12" viewBox="0 0 24 24" fill="none">
                      <path d="M3 9L12 2L21 9V20C21 20.5304 20.7893 21.0391 20.4142 21.4142C20.0391 21.7893 19.5304 22 19 22H5C4.46957 22 3.96086 21.7893 3.58579 21.4142C3.21071 21.0391 3 20.5304 3 20V9Z" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M9 22V12H15V22" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  </div>
                  <span className="text-lg font-medium text-gray-900">Home</span>
                </div>
              </button>

              {/* Experience */}
              <button className="p-6 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-md transition-all duration-200 text-left">
                <div className="flex flex-col items-center">
                  <div className="w-16 h-16 mb-4 flex items-center justify-center">
                    <svg className="w-12 h-12" viewBox="0 0 24 24" fill="none">
                      <path d="M21 16V8C20.9996 7.64927 20.9071 7.30481 20.7315 7.00116C20.556 6.69751 20.3037 6.44536 20 6.27L13 2.27C12.696 2.09446 12.3511 2.00205 12 2.00205C11.6489 2.00205 11.304 2.09446 11 2.27L4 6.27C3.69626 6.44536 3.44398 6.69751 3.26846 7.00116C3.09294 7.30481 3.00036 7.64927 3 8V16C3.00036 16.3507 3.09294 16.6952 3.26846 16.9988C3.44398 17.3025 3.69626 17.5546 4 17.73L11 21.73C11.304 21.9055 11.6489 21.9979 12 21.9979C12.3511 21.9979 12.696 21.9055 13 21.73L20 17.73C20.3037 17.5546 20.556 17.3025 20.7315 16.9988C20.9071 16.6952 20.9996 16.3507 21 16Z" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M7.5 4.21L12 6.81L16.5 4.21" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M7.5 19.79V14.6L3 12" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M21 12L16.5 14.6V19.79" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M3.27 6.96L12 12.01L20.73 6.96" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M12 22.08V12" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  </div>
                  <span className="text-lg font-medium text-gray-900">Experience</span>
                </div>
              </button>

              {/* Service */}
              <button className="p-6 border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-md transition-all duration-200 text-left">
                <div className="flex flex-col items-center">
                  <div className="w-16 h-16 mb-4 flex items-center justify-center">
                    <svg className="w-12 h-12" viewBox="0 0 24 24" fill="none">
                      <path d="M21 11.5C21.0034 12.8199 20.6951 14.1219 20.1 15.3C19.3944 16.7118 18.3098 17.8992 16.9674 18.7293C15.6251 19.5594 14.0782 19.9994 12.5 20C11.1801 20.0035 9.87812 19.6951 8.7 19.1L3 21L4.9 15.3C4.30493 14.1219 3.99656 12.8199 4 11.5C4.00061 9.92179 4.44061 8.37488 5.27072 7.03258C6.10083 5.69028 7.28825 4.6056 8.7 3.90003C9.87812 3.30496 11.1801 2.99659 12.5 3.00003H13C15.0843 3.11502 17.053 3.99479 18.5291 5.47089C20.0052 6.94699 20.885 8.91568 21 11V11.5Z" stroke="#6B7280" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  </div>
                  <span className="text-lg font-medium text-gray-900">Service</span>
                </div>
              </button>
            </div>

            {/* Next Button */}
            <button className="w-full bg-gradient-to-r from-red-800 to-red-900 text-white py-3 px-6 rounded-lg hover:from-red-900 hover:to-red-950 transition-all duration-300 hover:scale-105 shadow-lg">
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
